; This is the Calva REPL Window.
; It's just a file, really, with some special treatment from Calva.
; Use it as a REPL input prompt if you like. (When the REPL is connected.)
; TIPS: The keyboard shortcut `ctrl+alt+o r` shows and focuses this window
; Please see https://calva.io/repl-window/ for more info.
; Happy coding! ♥️

; TIPS: As with any Clojure file when the REPL is connected:
; - `alt+enter` evaluates the current top level form.
; - `ctrl+enter` evaluates the current form.
; Special for this file:
; - `alt+up` and `alt+down` traverse up and down the REPL command history
;    when the cursor is after the last contents at the prompt

nil
clj꞉shadow.user꞉> 
; TIPS: You can choose which REPL to use (clj or cljs):
;    *Calva: Toggle REPL connection*
;    (There is a button in the status bar for this)
nil
clj꞉user꞉> 
nil
clj꞉shadow.user꞉> 
; TIPS: You can choose which REPL to use (clj or cljs):
;    *Calva: Toggle REPL connection*
;    (There is a button in the status bar for this)
nil
cljs꞉user꞉> 
nil
cljs꞉main.app꞉> 
nil
cljs꞉main.app꞉> 
:repl/exception!
cljs꞉main.app꞉> 
:repl/exception!
cljs꞉main.app꞉> 
nil
clj꞉shadow.user꞉> 
; TIPS: You can choose which REPL to use (clj or cljs):
;    *Calva: Toggle REPL connection*
;    (There is a button in the status bar for this)
nil
clj꞉user꞉> 
nil
clj꞉main.app꞉> 
:repl/exception!
clj꞉main.app꞉> 
:repl/exception!
clj꞉main.app꞉> 
:repl/exception!
clj꞉main.app꞉> 
true
clj꞉main.app꞉> 
nil
clj꞉main.app꞉> 
nil
clj꞉main.app꞉> 
:repl/exception!
clj꞉main.app꞉> 
nil
clj꞉shadow.user꞉> 
; TIPS: You can choose which REPL to use (clj or cljs):
;    *Calva: Toggle REPL connection*
;    (There is a button in the status bar for this)
nil
clj꞉user꞉> 
nil
cljs꞉main.app꞉> 
:repl/exception!
cljs꞉main.app꞉> 
nil
clj꞉main.server꞉> 
; Execution error (ExceptionInfo) at malli.impl.util/-fail! (util.cljc:16).
; :malli.core/invalid-schema {:schema :merge}
clj꞉main.server꞉> 
nil
cljs꞉main.app꞉> 
nil
cljs꞉main.app꞉> 
:repl/exception!
cljs꞉main.app꞉> 
nil
clj꞉shadow.user꞉> 
; TIPS: You can choose which REPL to use (clj or cljs):
;    *Calva: Toggle REPL connection*
;    (There is a button in the status bar for this)
nil
cljs꞉user꞉> 
nil
cljs꞉main.app꞉> 
:repl/exception!
cljs꞉main.app꞉> 
nil
clj꞉shadow.user꞉> 
; TIPS: You can choose which REPL to use (clj or cljs):
;    *Calva: Toggle REPL connection*
;    (There is a button in the status bar for this)
nil
clj꞉user꞉> 
nil
clj꞉main.app꞉> 
:repl/exception!
clj꞉main.app꞉> 
nil
clj꞉shadow.user꞉> 
; TIPS: You can choose which REPL to use (clj or cljs):
;    *Calva: Toggle REPL connection*
;    (There is a button in the status bar for this)
nil
clj꞉user꞉> 
nil
cljs꞉main.app꞉> 
nil
cljs꞉main.app꞉> 
:repl/exception!
cljs꞉main.app꞉> 
:repl/exception!
cljs꞉main.app꞉> 
false
cljs꞉main.app꞉> 
nil
cljs꞉main.app꞉> 
{:schema #object [malli.util.t_malli$util37009],
 :value {:name "World"},
 :errors
 ({:path [:mood],
   :in [:mood],
   :schema #object [malli.core.t_malli$core47500],
   :value nil,
   :type :malli.core/missing-key})}
cljs꞉main.app꞉> 
{:schema #object [malli.util.t_malli$util37009],
 :value {:name "World"},
 :errors
 ({:path [:mood],
   :in [:mood],
   :schema #object [malli.core.t_malli$core47500],
   :value nil,
   :type :malli.core/missing-key})}
cljs꞉main.app꞉> 
nil
cljs꞉main.app꞉> 
nil
cljs꞉main.app꞉> 
{:mood ["missing required key"]}
cljs꞉main.app꞉> 
nil
cljs꞉main.app꞉> 
true
cljs꞉main.app꞉> 
{:schema #object [malli.util.t_malli$util37009],
 :value {:name "World"},
 :errors
 ({:path [:mood],
   :in [:mood],
   :schema #object [malli.core.t_malli$core47500],
   :value nil,
   :type :malli.core/missing-key})}
cljs꞉main.app꞉> 
{:mood ["missing required key"]}
cljs꞉main.app꞉> 
"Hello !  Feeling  perfect today, huh?"
cljs꞉main.app꞉> 
true
cljs꞉main.app꞉> 
"Hello !  Feeling  perfect today, huh?"
cljs꞉main.app꞉> 
"Hello !  Feeling  perfect today, huh?"
cljs꞉main.app꞉> 
"Hello !  Feeling  perfect today, huh?"
cljs꞉main.app꞉> 
#'main.app/hello-friend
cljs꞉main.app꞉> 
"Hello !  Feeling  perfect today, huh?"
cljs꞉main.app꞉> 
#'main.app/hello
cljs꞉main.app꞉> 
"Hello !  Feeling  perfect today, huh?"
cljs꞉main.app꞉> 
#'main.app/hello
cljs꞉main.app꞉> 
#'main.app/hello-friend
cljs꞉main.app꞉> 
"Hello !  Feeling  perfect today, huh?"
cljs꞉main.app꞉> 
nil
cljs꞉main.app꞉> 
"Hello ! Feeling  perfect today, huh?"
cljs꞉main.app꞉> 
nil
cljs꞉main.app꞉> 
#'main.app/start!
cljs꞉main.app꞉> 
nil
cljs꞉main.app꞉> 
"Hello ! Feeling  perfect today, huh?"
cljs꞉main.app꞉> 
nil
cljs꞉main.app꞉> 
#'main.app/hello
cljs꞉main.app꞉> 
"Hello World!"
cljs꞉main.app꞉> 
#'main.app/hello-friend
cljs꞉main.app꞉> 
"Hello ! Feeling  perfect today, huh?"
cljs꞉main.app꞉> 
#'main.app/start!
cljs꞉main.app꞉> 
"Hello ! Feeling  perfect today, huh?"
cljs꞉main.app꞉> 
#'main.app/hello-friend
cljs꞉main.app꞉> 
"Hello ! Feeling  perfect today, huh?"
cljs꞉main.app꞉> 
{:nom "World", :mood 42}
cljs꞉main.app꞉> 
"World"
cljs꞉main.app꞉> 
"Hello ! Feeling  perfect today, huh?"
cljs꞉main.app꞉> 
"World"
cljs꞉main.app꞉> 
"Hello !"
cljs꞉main.app꞉> 
nil
cljs꞉main.app꞉> 
nil
cljs꞉main.app꞉> 
#'main.app/hello-friend
cljs꞉main.app꞉> 
"Hello ! Feeling  perfect today, huh?"
cljs꞉main.app꞉> 
42
cljs꞉main.app꞉> 
"World"
cljs꞉main.app꞉> 
"Hello ! Feeling  perfect today, huh?"
cljs꞉main.app꞉> 
"Hello !"
cljs꞉main.app꞉> 
"Hello World!"
cljs꞉main.app꞉> 
#'main.app/hello
cljs꞉main.app꞉> 
nil
clj꞉shadow.user꞉> 
; TIPS: You can choose which REPL to use (clj or cljs):
;    *Calva: Toggle REPL connection*
;    (There is a button in the status bar for this)
nil
clj꞉user꞉> 
{:nom "World", :mood 42}
cljs꞉main.app꞉> 
"World"
cljs꞉main.app꞉> 
nil
cljs꞉main.app꞉> 
nil
cljs꞉main.app꞉> 
"Hello ! Feeling  perfect today, huh?"
cljs꞉main.app꞉> 
nil
cljs꞉main.app꞉> 
nil
cljs꞉main.app꞉> 
nil
cljs꞉main.app꞉> 
"Hello World!"
cljs꞉main.app꞉> 
42
cljs꞉main.app꞉> 
"Hello ! Feeling  perfect today, huh?"
cljs꞉main.app꞉> 
"World"
cljs꞉main.app꞉> 
"Hello World!"
cljs꞉main.app꞉> 
"Hello ! Feeling  perfect today, huh?"
cljs꞉main.app꞉> 
"Hello ! Feeling  perfect today, huh?"
cljs꞉main.app꞉> 
#'main.app/hello
cljs꞉main.app꞉> 
"Hello World!"
cljs꞉main.app꞉> 
"Hello ! Feeling  perfect today, huh?"
cljs꞉main.app꞉> 
"Hello ! Feeling  perfect today, huh?"
cljs꞉main.app꞉> 
"Hello ! Feeling  perfect today, huh?"
cljs꞉main.app꞉> 
"Hello !"
cljs꞉main.app꞉> 
#'main.app/hello-friend
cljs꞉main.app꞉> 
nil
cljs꞉main.app꞉> 
true
cljs꞉main.app꞉> 
{:schema #object [malli.util.t_malli$util37009],
 :value {:nom "World"},
 :errors
 ({:path [:mood],
   :in [:mood],
   :schema #object [malli.core.t_malli$core47500],
   :value nil,
   :type :malli.core/missing-key})}
cljs꞉main.app꞉> 
nil
cljs꞉main.app꞉> 
{:mood ["missing required key"]}
cljs꞉main.app꞉> 
nil
cljs꞉main.app꞉> 
nil
cljs꞉main.app꞉> 
{:mood ["missing required key"]}
cljs꞉main.app꞉> 
{:schema #object [malli.util.t_malli$util37009],
 :value {:nom "World", :mood :42},
 :errors ({:path [:mood], :in [:mood], :schema #object [malli.core.t_malli$core47411], :value :42})}
cljs꞉main.app꞉> 
nil
cljs꞉main.app꞉> 
{:schema #object [malli.util.t_malli$util37009],
 :value {:nom "World"},
 :errors
 ({:path [:mood],
   :in [:mood],
   :schema #object [malli.core.t_malli$core47500],
   :value nil,
   :type :malli.core/missing-key})}
cljs꞉main.app꞉> 
{:schema #object [malli.util.t_malli$util37009],
 :value {:nom "World", :mood :42},
 :errors ({:path [:mood], :in [:mood], :schema #object [malli.core.t_malli$core47411], :value :42})}
cljs꞉main.app꞉> 
{:mood ["should be an integer"]}
cljs꞉main.app꞉> 
nil
cljs꞉main.app꞉> 
{:schema #object [malli.util.t_malli$util37009],
 :value {:nom "World"},
 :errors
 ({:path [:mood],
   :in [:mood],
   :schema #object [malli.core.t_malli$core47500],
   :value nil,
   :type :malli.core/missing-key})}
cljs꞉main.app꞉> 
{:mood ["missing required key"]}
cljs꞉main.app꞉> 
{:schema #object [malli.util.t_malli$util37009],
 :value {:nom "World", :mood :42},
 :errors ({:path [:mood], :in [:mood], :schema #object [malli.core.t_malli$core47411], :value :42})}
cljs꞉main.app꞉> 
{:mood ["should be an integer"]}
cljs꞉main.app꞉> 
{:mood ["should be an integer"]}
cljs꞉main.app꞉> 
#'main.server/-main
clj꞉main.server꞉> 
nil
clj꞉main.server꞉> 
nil
clj꞉main.guarded꞉> 
; Execution error (ExceptionInfo) at malli.core/-exception (core.cljc:136).
; :malli.core/invalid-schema
clj꞉main.guarded꞉> 
{:every #IntoSchema{:type :every},
 :merge #IntoSchema{:type :merge},
 :union #IntoSchema{:type :union},
 :select-keys #IntoSchema{:type :select-keys}}
clj꞉main.guarded꞉> 
; Execution error (ExceptionInfo) at malli.core/-exception (core.cljc:136).
; :malli.core/invalid-schema
clj꞉main.guarded꞉> 
nil
clj꞉main.guarded꞉> 
; Execution error (ExceptionInfo) at malli.core/-exception (core.cljc:136).
; :malli.core/invalid-schema
clj꞉main.guarded꞉> 
; Execution error (ExceptionInfo) at malli.core/-exception (core.cljc:136).
; :malli.core/invalid-schema
clj꞉main.guarded꞉> 
nil
clj꞉main.guarded꞉> 
nil
clj꞉main.guarded꞉> 
nil
clj꞉main.guarded꞉> 
:as
clj꞉main.guarded꞉> 
nil
clj꞉main.guarded꞉> 
; Execution error (ExceptionInfo) at malli.core/-exception (core.cljc:136).
; :malli.core/invalid-schema
clj꞉main.guarded꞉> 
malli.core/-exception (core.cljc:136)
malli.core/-fail! (core.cljc:140)
malli.core/-fail! (core.cljc:138)
malli.core/-lookup! (core.cljc:271)
malli.core/-lookup! (core.cljc:267)
malli.core/schema (core.cljc:2050)
malli.core/schema (core.cljc:2028)
malli.util/-reducing (util.cljc:367)
clojure.core/mapv (core.clj:7048)
clojure.core.protocols/iterator-reduce! (protocols.clj:42)
clojure.core.protocols/iter-reduce (protocols.clj:52)
clojure.core.protocols/fn (protocols.clj:74)
clojure.core.protocols/fn (protocols.clj:13)
clojure.core/reduce (core.clj:6954)
clojure.core/mapv (core.clj:7039)
malli.util/-reducing (util.cljc:367)
malli.util/-util-schema (util.cljc:385)
malli.core/into-schema (core.cljc:1986)
malli.core/into-schema (core.cljc:1977)
malli.core/schema (core.cljc:2047)
malli.core/schema (core.cljc:2028)
malli.core/validator (core.cljc:2110)
malli.core/validator (core.cljc:2104)
malli.core/validate (core.cljc:2118)
malli.core/validate (core.cljc:2112)
main.guarded/eval42715 (NO_SOURCE_FILE:32)
clojure.lang.Compiler/eval (Compiler.java:7570)
clojure.core/eval (core.clj:3229)
clojure.core/eval (core.clj:3225)
nrepl.middleware.interruptible-eval/evaluate (interruptible_eval.clj:87)
clojure.core/apply (core.clj:667)
clojure.core/with-bindings* (core.clj:1990)
nrepl.middleware.interruptible-eval/evaluate (interruptible_eval.clj:87)
clojure.main/repl (main.clj:437)
clojure.main/repl (main.clj:459)
clojure.main/repl (main.clj:368)
nrepl.middleware.interruptible-eval/evaluate (interruptible_eval.clj:84)
nrepl.middleware.interruptible-eval/evaluate (interruptible_eval.clj:56)
nrepl.middleware.interruptible-eval/interruptible-eval (interruptible_eval.clj:152)
nrepl.middleware.session/session-exec (session.clj:218)
nrepl.middleware.session/session-exec (session.clj:217)
java.lang.Thread/run (Thread.java:1583)
clj꞉main.guarded꞉> 
nil
clj꞉main.server꞉> 
"Hello World! Feeling  perfect today, huh?"
clj꞉main.guarded꞉> 
; Execution error (ExceptionInfo) at malli.core/-exception (core.cljc:136).
; :malli.core/invalid-schema
clj꞉main.guarded꞉> 
"Hello World! Feeling  perfect today, huh?"
cljs꞉main.guarded꞉> 
nil
cljs꞉main.guarded꞉> 
true
cljs꞉main.guarded꞉> 
{:schema #object [malli.util.t_malli$util37009],
 :value {:nom "World"},
 :errors
 ({:path [:mood],
   :in [:mood],
   :schema #object [malli.core.t_malli$core47500],
   :value nil,
   :type :malli.core/missing-key})}
cljs꞉main.guarded꞉> 
nil
cljs꞉main.guarded꞉> 
{:mood ["missing required key"]}
cljs꞉main.guarded꞉> 
{:mood ["should be an integer"]}
cljs꞉main.guarded꞉> 
true
cljs꞉main.guarded꞉> 
{:mood ["missing required key"]}
cljs꞉main.guarded꞉> 
{:mood ["should be an integer"]}
cljs꞉main.guarded꞉> 
